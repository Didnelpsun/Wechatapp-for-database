<view class="main">
  <swiper indicator-dots="true" autoplay="true" duration="3000" >
    <swiper-item>
        <view class="swiper"><text class="descri">　　逻辑结构设计是将概念结构设计阶段完成的概念模型，转换成能被选定的数据库管理系统(DBMS)支持的数据模型。这里主要将E-R模型转换为关系模型。需要具体说明把原始数据进行分解、合并后重新组织起来的数据库全局逻辑结构，包括所确定的关键字和属性、重新确定的记录结构和文件结构、所建立的各个文件之间的相互关系，形成本数据库的数据库管理员视图。\n　　逻辑结构设计一般分为三步进行：1. 从E-R图向关系模式转化。 数据库的逻辑设计主要是将概念模型转换成一般的关系模式。2. 数据模型的优化 数据库逻辑设计的结果不是唯一的。为了进一步提高数据库应用系统的性能，还应该适当修改数据模型的结构，提高查询的速度。3. 关系视图设计 关系视图的设计又称为外模式的设计，也叫用户模式设计，是用户可直接访问的数据模式。
        </text></view>
    </swiper-item>
    <swiper-item>
         <view class="swiper"><text class="descri">　　在转化过程中会遇到如下问题：(1)命名问题。(2)非原子属性问题。(3)联系转换问题。
　　关系视图主要有三个作用：(1)为应用程序提供了一定的逻辑独立性。(2)更好地适应不同用户对数据的不同需求。(3)为不同用户划定了访问数据的不同范围来数据的保密。
　　转换规则：(1)一个实体型转换为一个关系模式(2)一个1:1联系可以转换为一个独立的关系模式，也可以与任意一端对应的关系模式合并。(3)一个1:n联系可以转换为一个独立的关系模式，也可以与n端对应的关系模式合并。(4)一个m:n联系可以转换为一个独立的关系模式。(5)一个多元联系可以转换为一个独立的关系模式。(6)具有相同码的关系模式可以合并。(7)有些1：n的联系，将属性合并到n端后，该属性也作为主码的一部分。
        </text></view>
    </swiper-item>
        <swiper-item>
          <view class="swiper"><text class="descri">　　可以在下方选择关卡进行通关，每一关的具体通过要求会在每一关显示，如需判断是否游戏成功请点击判断，如果游戏成功，则会在下方显示成功，如果失败则相应显示失败。需要返回上一关或则进入下一关或者返回上一关可以直接点击上一关或者下一关，无需返回到主页面进行选择。\n　　祝学习愉快！</text></view>
    </swiper-item>    
  </swiper>
  <picker bindchange="bindPickerChange" value="{{index}}" range="{{array}}">
    <view class="picker">
      关卡选择：{{array[index]}}
    </view>
  </picker>
</view>
