<view class="main">
  <swiper indicator-dots="true" autoplay="true" duration="3000" >
    <swiper-item>
        <view class="swiper"><text class="descri">　　在关系型数据库还未出现时，网状数据库与层次数据库占主流。网状数据库和层次数据库已经很好地解决了数据的集中和共享问题，但是在数据独立性和抽象级别上仍有很大欠缺。用户在对这两种数据库进行存取时，仍然需要明确数据的存储结构，指出存取路径。而后来出现的关系数据库较好地解决了这些问题。关系数据库理论出现于60年代末到70年代初。关系数据模型提供了关系操作的特点和功能要求。关系模型有严格的数学基础，抽象级别比较高，而且简单清晰，便于理解和使用。\n　　关系数据模型是以集合论中的关系概念为基础发展起来的。关系模型中无论是实体还是实体间的联系均由单一的结构类型——关系来表示。在实际的关系数据库中的关系也称表。一个关系数据库就是由若干个表组成。关系模型是指用二维表的形式表示实体和实体间联系的数据模型。
        </text></view>
    </swiper-item>
    <swiper-item>
         <view class="swiper"><text class="descri">　　关系模型的基本概念和基本术语共有十四个，但是在这里只介绍七个主要的（1）关系(Relation)：一个关系对应着一个二维表，二维表就是关系名。（2）元组(Tuple)：在二维表中的一行，称为一个元组。（3）属性(Attribute)：在二维表中的列，称为属性。属性的个数称为关系的元或度。列的值称为属性值；（4）（值）域(Domain)：属性值的取值范围为值域。（5）分量：每一行对应的列的属性值，即元组中的一个属性值。（6）关系模式：在二维表中的行定义，即对关系的描述称为关系模式。一般表示为（属性1，属性2，......,属性n）（7）键(码)：如果在一个关系中存在唯一标识一个实体的一个属性或属性集称为实体的键，即使得在该关系的任何一个关系状态中的两个元组，在该属性上的值的组合都不同。
        </text></view>
    </swiper-item>
        <swiper-item>
          <view class="swiper"><text class="descri">　　可以在下方选择关卡进行通关，每一关的具体通过要求会在每一关显示，如需判断是否游戏成功请点击判断，如果游戏成功，则会在下方显示成功，如果失败则相应显示失败。需要返回上一关或则进入下一关或者返回上一关可以直接点击上一关或者下一关，无需返回到主页面进行选择。\n　　祝学习愉快！</text></view>
    </swiper-item>    
  </swiper>
  <picker bindchange="bindPickerChange" value="{{index}}" range="{{array}}">
    <view class="picker">
      关卡选择：{{array[index]}}
    </view>
  </picker>
</view>
